@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ProductSales.BlazorWebApp.Account
@using ProductSales.BlazorWebApp.ViewModels
@using ProductSales.Infrastructure.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-md-6">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="loginVM" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="loginVM.Username" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="username" class="form-label">Username</label>
                    <ValidationMessage For="() => loginVM.Username" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="loginVM.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => loginVM.Password" class="text-danger" />
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    //-------------------------------------------------------------------------------------------------
    // Name        : Login
    // Type        : Blazor component
    // Author      : Kevin McGregor
    // History     : 31-Mar-25 - Created
    // Description :
    // Copyright   : This is the property of Escape Software Solutions Limited and cannot be used,
    //               copied or modified without the express permission of the company in
    //               in writing. Copyright 2025 Escape Software Solutions Limited.
    //-------------------------------------------------------------------------------------------------

    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginVM loginVM { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(loginVM.Username, loginVM.Password, isPersistent: false, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            errorMessage = "Error: Login failed.";
        }
    }
}
